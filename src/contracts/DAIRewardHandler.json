{
  "address": "0xCf64E746bd92a0c27df62DB5ABB332481e43257f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getRewardFromVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_b",
          "type": "uint256"
        }
      ],
      "name": "min",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "setRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f9cb7a9d24c78f2dbf65da6172b46e71a96cb618cdb0b8db07d593c70345cc0",
  "receipt": {
    "to": null,
    "from": "0xFB77c9BBd9Fd884A5078Ef0e97ec089C9B811243",
    "contractAddress": "0xCf64E746bd92a0c27df62DB5ABB332481e43257f",
    "transactionIndex": 3,
    "gasUsed": "2016563",
    "logsBloom": "0x
    "blockHash": "0xdaf0f6579d7f287cc0254e26a2c4c67e6bb24537d0ffb454be10a387ebd2dba5",
    "transactionHash": "0x7f9cb7a9d24c78f2dbf65da6172b46e71a96cb618cdb0b8db07d593c70345cc0",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 8016784,
        "transactionHash": "0x7f9cb7a9d24c78f2dbf65da6172b46e71a96cb618cdb0b8db07d593c70345cc0",
        "address": "0xCf64E746bd92a0c27df62DB5ABB332481e43257f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fb77c9bbd9fd884a5078ef0e97ec089c9b811243"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xdaf0f6579d7f287cc0254e26a2c4c67e6bb24537d0ffb454be10a387ebd2dba5"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 8016784,
        "transactionHash": "0x7f9cb7a9d24c78f2dbf65da6172b46e71a96cb618cdb0b8db07d593c70345cc0",
        "address": "0xCf64E746bd92a0c27df62DB5ABB332481e43257f",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fb77c9bbd9fd884a5078ef0e97ec089c9b811243",
          "0x000000000000000000000000fb77c9bbd9fd884a5078ef0e97ec089c9b811243"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xdaf0f6579d7f287cc0254e26a2c4c67e6bb24537d0ffb454be10a387ebd2dba5"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 8016784,
        "transactionHash": "0x7f9cb7a9d24c78f2dbf65da6172b46e71a96cb618cdb0b8db07d593c70345cc0",
        "address": "0xCf64E746bd92a0c27df62DB5ABB332481e43257f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000fb77c9bbd9fd884a5078ef0e97ec089c9b811243",
          "0x000000000000000000000000acbcf96d13031e6d906c0567350d1eddbc9860a3"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xdaf0f6579d7f287cc0254e26a2c4c67e6bb24537d0ffb454be10a387ebd2dba5"
      }
    ],
    "blockNumber": 8016784,
    "cumulativeGasUsed": "2517960",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xacBCF96d13031E6D906c0567350d1EdDBc9860A3",
    "0xc0322CEA66dFb3471688f57f6DdAd7A4d4EAb032",
    "0x92C77a7bB3A7bd847523d0cb34078d4F4A42C452"
  ],
  "solcInputHash": "01a0b70a059871db4215d262a86724ef",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getRewardFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"_account\":\"address\"}},\"constructor\":{\"params\":{\"_owner\":\"address\",\"_rewardsToken\":\"address\",\"_vault\":\"uint256\"}},\"earned(address)\":{\"params\":{\"_account\":\"address\"}},\"exit(address)\":{\"details\":\"Only vault can call it\",\"params\":{\"_staker\":\"address\"}},\"getReward()\":{\"details\":\"updates rewards on call\"},\"getRewardFromVault(address)\":{\"details\":\"Only vault can call itupdates rewards on call\",\"params\":{\"_staker\":\"address\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"min(uint256,uint256)\":{\"params\":{\"_a\":\"uint\",\"_b\":\"uint\"}},\"notifyRewardAmount(uint256)\":{\"details\":\"Only owner  can call itIncreases duration of rewards\",\"params\":{\"_reward\":\"uint\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recoverERC20(address,uint256)\":{\"details\":\"Only owner  can call it\",\"params\":{\"_tokenAddress\":\"address\",\"_tokenAmount\":\"uint\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setRewardsDuration(uint256)\":{\"details\":\"Only owner  can call itPrevious rewards must be complete\",\"params\":{\"_rewardsDuration\":\"uint\"}},\"stake(address,uint256)\":{\"details\":\"Only vault can call itupdates rewards on call\",\"params\":{\"_amount\":\"uint\",\"_staker\":\"address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,uint256)\":{\"details\":\"Only vault can call itupdates rewards on call\",\"params\":{\"_amount\":\"uint\",\"_staker\":\"address\"}}},\"stateVariables\":{\"_balances\":{\"details\":\"Tracks the amount of TCAP minted per user\"},\"_totalSupply\":{\"details\":\"Tracks the total supply of the minted TCAPs\"}},\"version\":1},\"userdoc\":{\"events\":{\"Recovered(address,uint256)\":{\"notice\":\"An event emitted when a erc20 token is recovered\"},\"RewardAdded(uint256)\":{\"notice\":\"An event emitted when a reward is added\"},\"RewardPaid(address,uint256)\":{\"notice\":\"An event emitted when reward is paid to a user\"},\"RewardsDurationUpdated(uint256)\":{\"notice\":\"An event emitted when the rewards duration is updated\"},\"Staked(address,uint256)\":{\"notice\":\"An event emitted when TCAP is minted and staked to earn rewards\"},\"Withdrawn(address,uint256)\":{\"notice\":\"An event emitted when TCAP is burned and removed of stake\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Returns the amount of TCAP tokens minted and getting reward from specific user.\"},\"constructor\":{\"notice\":\"Constructor\"},\"earned(address)\":{\"notice\":\"Returns the amount of reward tokens a user has earned.\"},\"exit(address)\":{\"notice\":\"Removes all stake and transfers all rewards to the staker.\"},\"getReward()\":{\"notice\":\"Transfers to the caller the current amount of rewards tokens earned.\"},\"getRewardFromVault(address)\":{\"notice\":\"Called when TCAP is burned or liquidated, transfers to the staker the current amount of rewards tokens earned.\"},\"lastTimeRewardApplicable()\":{\"notice\":\"Returns the minimun between current block timestamp or the finish period of rewards.\"},\"lastUpdateTime()\":{\"notice\":\"Last time rewards were updated\"},\"min(uint256,uint256)\":{\"notice\":\"Returns the minimun between two variables\"},\"notifyRewardAmount(uint256)\":{\"notice\":\"Notifies the contract that reward has been added to be given.\"},\"periodFinish()\":{\"notice\":\"Tracks the period where users stop earning rewards\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\"},\"rewardPerToken()\":{\"notice\":\"Returns the calculated reward per token deposited.\"},\"rewards(address)\":{\"notice\":\"Tracks the user rewards\"},\"rewardsDuration()\":{\"notice\":\"How long the rewards lasts, it updates when more rewards are added\"},\"rewardsToken()\":{\"notice\":\"Address of the reward\"},\"setRewardsDuration(uint256)\":{\"notice\":\"Updates the reward duration\"},\"stake(address,uint256)\":{\"notice\":\"Called when TCAP is minted, adds the minted value as stake\"},\"totalSupply()\":{\"notice\":\"Returns the total amount of TCAP tokens minted and getting reward on this vault.\"},\"userRewardPerTokenPaid(address)\":{\"notice\":\"Track the rewards paid to users\"},\"vault()\":{\"notice\":\"Address of the vault\"},\"withdraw(address,uint256)\":{\"notice\":\"Called when TCAP is burned or liquidated, removes the burned value as stake\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RewardHandler.sol\":\"RewardHandler\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37ff88aa5ca8f533e31b9e1cb5354816b15bb7d41c904ea1c8f5dd5a78d6da25\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xf7c39c7e6d06ed3bda90cfefbcbf2ddc32c599c3d6721746546ad64946efccaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xae0992eb1ec30fd1ecdf2e04a6036decfc9797bf11dc1ec84b546b74318d5ec2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x065360ef3924db6b63c2160886b5de737497dd64a917e362dd8d857cda1f5ae2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/RewardHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n\\n* Based on Synthetix Staking Rewards contract\\n* Synthetix: StakingRewards.sol\\n*\\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/v2.37.0/contracts/StakingRewards.sol\\n* Docs: https://docs.synthetix.io/contracts/source/contracts/StakingRewards/\\n*/\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract RewardHandler is Ownable, AccessControl, ReentrancyGuard, Pausable {\\n  /// @notice Open Zeppelin libraries\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice Address of the reward\\n  IERC20 public rewardsToken;\\n\\n  /// @notice Address of the vault\\n  address public vault;\\n\\n  /// @notice Tracks the period where users stop earning rewards\\n  uint256 public periodFinish = 0;\\n\\n  uint256 public rewardRate = 0;\\n\\n  /// @notice How long the rewards lasts, it updates when more rewards are added\\n  uint256 public rewardsDuration = 7 days;\\n\\n  /// @notice Last time rewards were updated\\n  uint256 public lastUpdateTime;\\n\\n  uint256 public rewardPerTokenStored;\\n\\n  /// @notice Track the rewards paid to users\\n  mapping(address => uint256) public userRewardPerTokenPaid;\\n\\n  /// @notice Tracks the user rewards\\n  mapping(address => uint256) public rewards;\\n\\n  /// @dev Tracks the total supply of the minted TCAPs\\n  uint256 private _totalSupply;\\n\\n  /// @dev Tracks the amount of TCAP minted per user\\n  mapping(address => uint256) private _balances;\\n\\n  /// @notice An event emitted when a reward is added\\n  event RewardAdded(uint256 reward);\\n\\n  /// @notice An event emitted when TCAP is minted and staked to earn rewards\\n  event Staked(address indexed user, uint256 amount);\\n\\n  /// @notice An event emitted when TCAP is burned and removed of stake\\n  event Withdrawn(address indexed user, uint256 amount);\\n\\n  /// @notice An event emitted when reward is paid to a user\\n  event RewardPaid(address indexed user, uint256 reward);\\n\\n  /// @notice An event emitted when the rewards duration is updated\\n  event RewardsDurationUpdated(uint256 newDuration);\\n\\n  /// @notice An event emitted when a erc20 token is recovered\\n  event Recovered(address token, uint256 amount);\\n\\n  /**\\n   * @notice Constructor\\n   * @param _owner address\\n   * @param _rewardsToken address\\n   * @param _vault uint256\\n   */\\n  constructor(\\n    address _owner,\\n    address _rewardsToken,\\n    address _vault\\n  ) {\\n    rewardsToken = IERC20(_rewardsToken);\\n    vault = _vault;\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    transferOwnership(_owner);\\n  }\\n\\n  /**\\n   * @notice Updates the reward and time on call.\\n   * @param _account address\\n   */\\n  modifier updateReward(address _account) {\\n    rewardPerTokenStored = rewardPerToken();\\n    lastUpdateTime = lastTimeRewardApplicable();\\n\\n    if (_account != address(0)) {\\n      rewards[_account] = earned(_account);\\n      userRewardPerTokenPaid[_account] = rewardPerTokenStored;\\n    }\\n    _;\\n  }\\n\\n  /// @notice Reverts if the caller is not a vault.\\n  modifier onlyVault() {\\n    require(\\n      msg.sender == vault,\\n      \\\"RewardHandler::OnlyVault: not calling from vault\\\"\\n    );\\n    _;\\n  }\\n\\n  /// @notice Returns the total amount of TCAP tokens minted and getting reward on this vault.\\n  function totalSupply() external view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @notice Returns the amount of TCAP tokens minted and getting reward from specific user.\\n   * @param _account address\\n   */\\n  function balanceOf(address _account) external view returns (uint256) {\\n    return _balances[_account];\\n  }\\n\\n  function getRewardForDuration() external view returns (uint256) {\\n    return rewardRate.mul(rewardsDuration);\\n  }\\n\\n  /**\\n   * @notice Called when TCAP is minted, adds the minted value as stake\\n   * @param _staker address\\n   * @param _amount uint\\n   * @dev Only vault can call it\\n   * @dev updates rewards on call\\n   */\\n  function stake(address _staker, uint256 _amount)\\n    external\\n    onlyVault\\n    nonReentrant\\n    whenNotPaused\\n    updateReward(_staker)\\n  {\\n    require(_amount > 0, \\\"Cannot stake 0\\\");\\n    _totalSupply = _totalSupply.add(_amount);\\n    _balances[_staker] = _balances[_staker].add(_amount);\\n    emit Staked(_staker, _amount);\\n  }\\n\\n  /**\\n   * @notice Removes all stake and transfers all rewards to the staker.\\n   * @param _staker address\\n   * @dev Only vault can call it\\n   */\\n  function exit(address _staker) external onlyVault {\\n    withdraw(_staker, _balances[_staker]);\\n    getRewardFromVault(_staker);\\n  }\\n\\n  /**\\n   * @notice Notifies the contract that reward has been added to be given.\\n   * @param _reward uint\\n   * @dev Only owner  can call it\\n   * @dev Increases duration of rewards\\n   */\\n  function notifyRewardAmount(uint256 _reward)\\n    external\\n    onlyOwner\\n    updateReward(address(0))\\n  {\\n    if (block.timestamp >= periodFinish) {\\n      rewardRate = _reward.div(rewardsDuration);\\n    } else {\\n      uint256 remaining = periodFinish.sub(block.timestamp);\\n      uint256 leftover = remaining.mul(rewardRate);\\n      rewardRate = _reward.add(leftover).div(rewardsDuration);\\n    }\\n\\n    // Ensure the provided reward amount is not more than the balance in the contract.\\n    // This keeps the reward rate in the right range, preventing overflows due to\\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n    uint256 balance = rewardsToken.balanceOf(address(this));\\n    require(\\n      rewardRate <= balance.div(rewardsDuration),\\n      \\\"Provided reward too high\\\"\\n    );\\n\\n    lastUpdateTime = block.timestamp;\\n    periodFinish = block.timestamp.add(rewardsDuration);\\n    emit RewardAdded(_reward);\\n  }\\n\\n  /**\\n   * @notice  Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n   * @param _tokenAddress address\\n   * @param _tokenAmount uint\\n   * @dev Only owner  can call it\\n   */\\n  function recoverERC20(address _tokenAddress, uint256 _tokenAmount)\\n    external\\n    onlyOwner\\n  {\\n    // Cannot recover the staking token or the rewards token\\n    require(\\n      _tokenAddress != address(rewardsToken),\\n      \\\"Cannot withdraw the staking or rewards tokens\\\"\\n    );\\n    IERC20(_tokenAddress).safeTransfer(owner(), _tokenAmount);\\n    emit Recovered(_tokenAddress, _tokenAmount);\\n  }\\n\\n  /**\\n   * @notice  Updates the reward duration\\n   * @param _rewardsDuration uint\\n   * @dev Only owner  can call it\\n   * @dev Previous rewards must be complete\\n   */\\n  function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n    require(\\n      block.timestamp > periodFinish,\\n      \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n    );\\n    rewardsDuration = _rewardsDuration;\\n    emit RewardsDurationUpdated(rewardsDuration);\\n  }\\n\\n  /// @notice Returns the minimun between current block timestamp or the finish period of rewards.\\n  function lastTimeRewardApplicable() public view returns (uint256) {\\n    return min(block.timestamp, periodFinish);\\n  }\\n\\n  /// @notice Returns the calculated reward per token deposited.\\n  function rewardPerToken() public view returns (uint256) {\\n    if (_totalSupply == 0) {\\n      return rewardPerTokenStored;\\n    }\\n\\n    return\\n      rewardPerTokenStored.add(\\n        lastTimeRewardApplicable()\\n          .sub(lastUpdateTime)\\n          .mul(rewardRate)\\n          .mul(1e18)\\n          .div(_totalSupply)\\n      );\\n  }\\n\\n  /**\\n   * @notice Returns the amount of reward tokens a user has earned.\\n   * @param _account address\\n   */\\n  function earned(address _account) public view returns (uint256) {\\n    return\\n      _balances[_account]\\n        .mul(rewardPerToken().sub(userRewardPerTokenPaid[_account]))\\n        .div(1e18)\\n        .add(rewards[_account]);\\n  }\\n\\n  /**\\n   * @notice Returns the minimun between two variables\\n   * @param _a uint\\n   * @param _b uint\\n   */\\n  function min(uint256 _a, uint256 _b) public pure returns (uint256) {\\n    return _a < _b ? _a : _b;\\n  }\\n\\n  /**\\n   * @notice Called when TCAP is burned or liquidated, removes the burned value as stake\\n   * @param _staker address\\n   * @param _amount uint\\n   * @dev Only vault can call it\\n   * @dev updates rewards on call\\n   */\\n  function withdraw(address _staker, uint256 _amount)\\n    public\\n    onlyVault\\n    nonReentrant\\n    updateReward(_staker)\\n  {\\n    require(_amount > 0, \\\"Cannot withdraw 0\\\");\\n    _totalSupply = _totalSupply.sub(_amount);\\n    _balances[_staker] = _balances[_staker].sub(_amount);\\n    emit Withdrawn(_staker, _amount);\\n  }\\n\\n  /**\\n   * @notice Called when TCAP is burned or liquidated, transfers to the staker the current amount of rewards tokens earned.\\n   * @param _staker address\\n   * @dev Only vault can call it\\n   * @dev updates rewards on call\\n   */\\n  function getRewardFromVault(address _staker)\\n    public\\n    onlyVault\\n    nonReentrant\\n    updateReward(_staker)\\n  {\\n    uint256 reward = rewards[_staker];\\n    if (reward > 0) {\\n      rewards[_staker] = 0;\\n      rewardsToken.safeTransfer(_staker, reward);\\n      emit RewardPaid(_staker, reward);\\n    }\\n  }\\n\\n  /**\\n   * @notice Transfers to the caller the current amount of rewards tokens earned.\\n   * @dev updates rewards on call\\n   */\\n  function getReward() public nonReentrant updateReward(msg.sender) {\\n    uint256 reward = rewards[msg.sender];\\n    if (reward > 0) {\\n      rewards[msg.sender] = 0;\\n      rewardsToken.safeTransfer(msg.sender, reward);\\n      emit RewardPaid(msg.sender, reward);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa66b7eefaf4c344a3ce119412888a979dc956d2528754c94d47b53684f299a0a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600555600060065562093a806007553480156200002257600080fd5b506040516200237f3803806200237f833981810160405260608110156200004857600080fd5b508051602082015160409092015190919060006200006562000102565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350916000805160206200235f833981519152908290a3506001600255600380546001600160a81b0319166101006001600160a01b038581169190910291909117909155600480546001600160a01b031916918316919091179055620000ee60003362000106565b620000f98362000116565b50505062000316565b3390565b62000112828262000214565b5050565b6200012062000102565b6000546001600160a01b0390811691161462000183576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116620001ca5760405162461bcd60e51b8152600401808060200182810382526026815260200180620023396026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216916000805160206200235f83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008281526001602090815260409091206200023b918390620015cb6200028f821b17901c565b1562000112576200024b62000102565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620002a6836001600160a01b038416620002af565b90505b92915050565b6000620002bd8383620002fe565b620002f557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620002a9565b506000620002a9565b60009081526001919091016020526040902054151590565b61201380620003266000396000f3fe608060405234801561001057600080fd5b506004361061021b5760003560e01c80638da5cb5b11610125578063cd3daf9d116100ad578063e0588af71161007c578063e0588af714610554578063ebe2b12b1461057a578063f2fde38b14610582578063f3fef3a3146105a8578063fbfa77cf146105d45761021b565b8063cd3daf9d14610510578063d1af0c7d14610518578063d547741f14610520578063df136d651461054c5761021b565b8063adc9772e116100f4578063adc9772e1461047c578063b42652e9146104a8578063c8f33c91146104ce578063ca15c873146104d6578063cc1a378f146104f35761021b565b80638da5cb5b146104015780639010d07c1461042557806391d1485414610448578063a217fddf146104745761021b565b80633d18b912116101a85780637ae2b5c7116101775780637ae2b5c71461037c5780637b0a47ee1461039f57806380faa57d146103a75780638980f11f146103af5780638b876347146103db5761021b565b80633d18b9121461032a5780635c975abb1461033257806370a082311461034e578063715018a6146103745761021b565b8063248a9ca3116101ef578063248a9ca31461028e5780632f2ff15d146102ab57806336568abe146102d9578063386a9525146103055780633c6b16ab1461030d5761021b565b80628cc262146102205780630700037d1461025857806318160ddd1461027e5780631c1f78eb14610286575b600080fd5b6102466004803603602081101561023657600080fd5b50356001600160a01b03166105dc565b60408051918252519081900360200190f35b6102466004803603602081101561026e57600080fd5b50356001600160a01b031661065a565b61024661066c565b610246610673565b610246600480360360208110156102a457600080fd5b5035610691565b6102d7600480360360408110156102c157600080fd5b50803590602001356001600160a01b03166106a6565b005b6102d7600480360360408110156102ef57600080fd5b50803590602001356001600160a01b0316610712565b610246610773565b6102d76004803603602081101561032357600080fd5b5035610779565b6102d76109c0565b61033a610ae7565b604080519115158252519081900360200190f35b6102466004803603602081101561036457600080fd5b50356001600160a01b0316610af0565b6102d7610b0b565b6102466004803603604081101561039257600080fd5b5080359060200135610bad565b610246610bc5565b610246610bcb565b6102d7600480360360408110156103c557600080fd5b506001600160a01b038135169060200135610bd9565b610246600480360360208110156103f157600080fd5b50356001600160a01b0316610ce7565b610409610cf9565b604080516001600160a01b039092168252519081900360200190f35b6104096004803603604081101561043b57600080fd5b5080359060200135610d08565b61033a6004803603604081101561045e57600080fd5b50803590602001356001600160a01b0316610d20565b610246610d38565b6102d76004803603604081101561049257600080fd5b506001600160a01b038135169060200135610d3d565b6102d7600480360360208110156104be57600080fd5b50356001600160a01b0316610f4a565b610246610fc3565b610246600480360360208110156104ec57600080fd5b5035610fc9565b6102d76004803603602081101561050957600080fd5b5035610fe0565b6102466110b3565b610409611101565b6102d76004803603604081101561053657600080fd5b50803590602001356001600160a01b0316611115565b61024661116e565b6102d76004803603602081101561056a57600080fd5b50356001600160a01b0316611174565b6102466112f9565b6102d76004803603602081101561059857600080fd5b50356001600160a01b03166112ff565b6102d7600480360360408110156105be57600080fd5b506001600160a01b0381351690602001356113f7565b6104096115bc565b6001600160a01b0381166000908152600b6020908152604080832054600a909252822054610654919061064e90670de0b6b3a76400009061064890610629906106236110b3565b906115e0565b6001600160a01b0388166000908152600d602052604090205490611622565b9061167b565b906116bd565b92915050565b600b6020526000908152604090205481565b600c545b90565b600061068c60075460065461162290919063ffffffff16565b905090565b60009081526001602052604090206002015490565b6000828152600160205260409020600201546106c9906106c4611717565b610d20565b6107045760405162461bcd60e51b815260040180806020018281038252602f815260200180611e1c602f913960400191505060405180910390fd5b61070e828261171b565b5050565b61071a611717565b6001600160a01b0316816001600160a01b0316146107695760405162461bcd60e51b815260040180806020018281038252602f815260200180611faf602f913960400191505060405180910390fd5b61070e8282611784565b60075481565b610781611717565b6000546001600160a01b039081169116146107d1576040805162461bcd60e51b81526020600482018190526024820152600080516020611f38833981519152604482015290519081900360640190fd5b60006107db6110b3565b6009556107e6610bcb565b6008556001600160a01b0381161561082d57610801816105dc565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b600554421061084c5760075461084490839061167b565b60065561088f565b60055460009061085c90426115e0565b905060006108756006548361162290919063ffffffff16565b6007549091506108899061064886846116bd565b60065550505b600354604080516370a0823160e01b8152306004820152905160009261010090046001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156108df57600080fd5b505afa1580156108f3573d6000803e3d6000fd5b505050506040513d602081101561090957600080fd5b505160075490915061091c90829061167b565b6006541115610972576040805162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f20686967680000000000000000604482015290519081900360640190fd5b42600881905560075461098591906116bd565b6005556040805184815290517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9181900360200190a1505050565b600280541415610a05576040805162461bcd60e51b815260206004820152601f6024820152600080516020611e4b833981519152604482015290519081900360640190fd5b6002805533610a126110b3565b600955610a1d610bcb565b6008556001600160a01b03811615610a6457610a38816105dc565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b336000908152600b60205260409020548015610ade57336000818152600b6020526040812055600354610aa7916101009091046001600160a01b031690836117ed565b60408051828152905133917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b50506001600255565b60035460ff1690565b6001600160a01b03166000908152600d602052604090205490565b610b13611717565b6000546001600160a01b03908116911614610b63576040805162461bcd60e51b81526020600482018190526024820152600080516020611f38833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000818310610bbc5781610bbe565b825b9392505050565b60065481565b600061068c42600554610bad565b610be1611717565b6000546001600160a01b03908116911614610c31576040805162461bcd60e51b81526020600482018190526024820152600080516020611f38833981519152604482015290519081900360640190fd5b6003546001600160a01b03838116610100909204161415610c835760405162461bcd60e51b815260040180806020018281038252602d815260200180611f58602d913960400191505060405180910390fd5b610c9f610c8e610cf9565b6001600160a01b03841690836117ed565b604080516001600160a01b03841681526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a15050565b600a6020526000908152604090205481565b6000546001600160a01b031690565b6000828152600160205260408120610bbe9083611844565b6000828152600160205260408120610bbe9083611850565b600081565b6004546001600160a01b03163314610d865760405162461bcd60e51b8152600401808060200182810382526030815260200180611e916030913960400191505060405180910390fd5b600280541415610dcb576040805162461bcd60e51b815260206004820152601f6024820152600080516020611e4b833981519152604482015290519081900360640190fd5b6002805560035460ff1615610e1a576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b81610e236110b3565b600955610e2e610bcb565b6008556001600160a01b03811615610e7557610e49816105dc565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b60008211610ebb576040805162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b604482015290519081900360640190fd5b600c54610ec890836116bd565b600c556001600160a01b0383166000908152600d6020526040902054610eee90836116bd565b6001600160a01b0384166000818152600d6020908152604091829020939093558051858152905191927f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d92918290030190a25050600160025550565b6004546001600160a01b03163314610f935760405162461bcd60e51b8152600401808060200182810382526030815260200180611e916030913960400191505060405180910390fd5b6001600160a01b0381166000908152600d6020526040902054610fb79082906113f7565b610fc081611174565b50565b60085481565b600081815260016020526040812061065490611865565b610fe8611717565b6000546001600160a01b03908116911614611038576040805162461bcd60e51b81526020600482018190526024820152600080516020611f38833981519152604482015290519081900360640190fd5b60055442116110785760405162461bcd60e51b8152600401808060200182810382526058815260200180611dc46058913960600191505060405180910390fd5b60078190556040805182815290517ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39181900360200190a150565b6000600c54600014156110c95750600954610670565b61068c6110f8600c54610648670de0b6b3a76400006110f26006546110f2600854610623610bcb565b90611622565b600954906116bd565b60035461010090046001600160a01b031681565b600082815260016020526040902060020154611133906106c4611717565b6107695760405162461bcd60e51b8152600401808060200182810382526030815260200180611ee76030913960400191505060405180910390fd5b60095481565b6004546001600160a01b031633146111bd5760405162461bcd60e51b8152600401808060200182810382526030815260200180611e916030913960400191505060405180910390fd5b600280541415611202576040805162461bcd60e51b815260206004820152601f6024820152600080516020611e4b833981519152604482015290519081900360640190fd5b600280558061120f6110b3565b60095561121a610bcb565b6008556001600160a01b0381161561126157611235816105dc565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b6001600160a01b0382166000908152600b602052604090205480156112ef576001600160a01b038084166000908152600b60205260408120556003546112af916101009091041684836117ed565b6040805182815290516001600160a01b038516917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b5050600160025550565b60055481565b611307611717565b6000546001600160a01b03908116911614611357576040805162461bcd60e51b81526020600482018190526024820152600080516020611f38833981519152604482015290519081900360640190fd5b6001600160a01b03811661139c5760405162461bcd60e51b8152600401808060200182810382526026815260200180611e6b6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031633146114405760405162461bcd60e51b8152600401808060200182810382526030815260200180611e916030913960400191505060405180910390fd5b600280541415611485576040805162461bcd60e51b815260206004820152601f6024820152600080516020611e4b833981519152604482015290519081900360640190fd5b60028055816114926110b3565b60095561149d610bcb565b6008556001600160a01b038116156114e4576114b8816105dc565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b6000821161152d576040805162461bcd60e51b8152602060048201526011602482015270043616e6e6f74207769746864726177203607c1b604482015290519081900360640190fd5b600c5461153a90836115e0565b600c556001600160a01b0383166000908152600d602052604090205461156090836115e0565b6001600160a01b0384166000818152600d6020908152604091829020939093558051858152905191927f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d592918290030190a25050600160025550565b6004546001600160a01b031681565b6000610bbe836001600160a01b038416611870565b6000610bbe83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506118ba565b60008261163157506000610654565b8282028284828161163e57fe5b0414610bbe5760405162461bcd60e51b8152600401808060200182810382526021815260200180611f176021913960400191505060405180910390fd5b6000610bbe83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611951565b600082820183811015610bbe576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b600082815260016020526040902061173390826115cb565b1561070e57611740611717565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260016020526040902061179c90826119b6565b1561070e576117a9611717565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261183f9084906119cb565b505050565b6000610bbe8383611a7c565b6000610bbe836001600160a01b038416611ae0565b600061065482611af8565b600061187c8383611ae0565b6118b257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610654565b506000610654565b600081848411156119495760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561190e5781810151838201526020016118f6565b50505050905090810190601f16801561193b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836119a05760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561190e5781810151838201526020016118f6565b5060008385816119ac57fe5b0495945050505050565b6000610bbe836001600160a01b038416611afc565b6060611a20826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bc29092919063ffffffff16565b80519091501561183f57808060200190516020811015611a3f57600080fd5b505161183f5760405162461bcd60e51b815260040180806020018281038252602a815260200180611f85602a913960400191505060405180910390fd5b81546000908210611abe5760405162461bcd60e51b8152600401808060200182810382526022815260200180611da26022913960400191505060405180910390fd5b826000018281548110611acd57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60008181526001830160205260408120548015611bb85783546000198083019190810190600090879083908110611b2f57fe5b9060005260206000200154905080876000018481548110611b4c57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611b7c57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610654565b6000915050610654565b6060611bd18484600085611bd9565b949350505050565b606082471015611c1a5760405162461bcd60e51b8152600401808060200182810382526026815260200180611ec16026913960400191505060405180910390fd5b611c2385611d35565b611c74576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611cb35780518252601f199092019160209182019101611c94565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611d15576040519150601f19603f3d011682016040523d82523d6000602084013e611d1a565b606091505b5091509150611d2a828286611d3b565b979650505050505050565b3b151590565b60608315611d4a575081610bbe565b825115611d5a5782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561190e5781810151838201526020016118f656fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e647350726576696f7573207265776172647320706572696f64206d75737420626520636f6d706c657465206265666f7265206368616e67696e6720746865206475726174696f6e20666f7220746865206e657720706572696f64416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e745265656e7472616e637947756172643a207265656e7472616e742063616c6c004f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737352657761726448616e646c65723a3a4f6e6c795661756c743a206e6f742063616c6c696e672066726f6d207661756c74416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657243616e6e6f7420776974686472617720746865207374616b696e67206f72207265776172647320746f6b656e735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220cd6e4f8f28a29c4404114c9a3dd83d2fce7ea7d99d9afe696fd4f93b117b45c664736f6c634300070500334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573738be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021b5760003560e01c80638da5cb5b11610125578063cd3daf9d116100ad578063e0588af71161007c578063e0588af714610554578063ebe2b12b1461057a578063f2fde38b14610582578063f3fef3a3146105a8578063fbfa77cf146105d45761021b565b8063cd3daf9d14610510578063d1af0c7d14610518578063d547741f14610520578063df136d651461054c5761021b565b8063adc9772e116100f4578063adc9772e1461047c578063b42652e9146104a8578063c8f33c91146104ce578063ca15c873146104d6578063cc1a378f146104f35761021b565b80638da5cb5b146104015780639010d07c1461042557806391d1485414610448578063a217fddf146104745761021b565b80633d18b912116101a85780637ae2b5c7116101775780637ae2b5c71461037c5780637b0a47ee1461039f57806380faa57d146103a75780638980f11f146103af5780638b876347146103db5761021b565b80633d18b9121461032a5780635c975abb1461033257806370a082311461034e578063715018a6146103745761021b565b8063248a9ca3116101ef578063248a9ca31461028e5780632f2ff15d146102ab57806336568abe146102d9578063386a9525146103055780633c6b16ab1461030d5761021b565b80628cc262146102205780630700037d1461025857806318160ddd1461027e5780631c1f78eb14610286575b600080fd5b6102466004803603602081101561023657600080fd5b50356001600160a01b03166105dc565b60408051918252519081900360200190f35b6102466004803603602081101561026e57600080fd5b50356001600160a01b031661065a565b61024661066c565b610246610673565b610246600480360360208110156102a457600080fd5b5035610691565b6102d7600480360360408110156102c157600080fd5b50803590602001356001600160a01b03166106a6565b005b6102d7600480360360408110156102ef57600080fd5b50803590602001356001600160a01b0316610712565b610246610773565b6102d76004803603602081101561032357600080fd5b5035610779565b6102d76109c0565b61033a610ae7565b604080519115158252519081900360200190f35b6102466004803603602081101561036457600080fd5b50356001600160a01b0316610af0565b6102d7610b0b565b6102466004803603604081101561039257600080fd5b5080359060200135610bad565b610246610bc5565b610246610bcb565b6102d7600480360360408110156103c557600080fd5b506001600160a01b038135169060200135610bd9565b610246600480360360208110156103f157600080fd5b50356001600160a01b0316610ce7565b610409610cf9565b604080516001600160a01b039092168252519081900360200190f35b6104096004803603604081101561043b57600080fd5b5080359060200135610d08565b61033a6004803603604081101561045e57600080fd5b50803590602001356001600160a01b0316610d20565b610246610d38565b6102d76004803603604081101561049257600080fd5b506001600160a01b038135169060200135610d3d565b6102d7600480360360208110156104be57600080fd5b50356001600160a01b0316610f4a565b610246610fc3565b610246600480360360208110156104ec57600080fd5b5035610fc9565b6102d76004803603602081101561050957600080fd5b5035610fe0565b6102466110b3565b610409611101565b6102d76004803603604081101561053657600080fd5b50803590602001356001600160a01b0316611115565b61024661116e565b6102d76004803603602081101561056a57600080fd5b50356001600160a01b0316611174565b6102466112f9565b6102d76004803603602081101561059857600080fd5b50356001600160a01b03166112ff565b6102d7600480360360408110156105be57600080fd5b506001600160a01b0381351690602001356113f7565b6104096115bc565b6001600160a01b0381166000908152600b6020908152604080832054600a909252822054610654919061064e90670de0b6b3a76400009061064890610629906106236110b3565b906115e0565b6001600160a01b0388166000908152600d602052604090205490611622565b9061167b565b906116bd565b92915050565b600b6020526000908152604090205481565b600c545b90565b600061068c60075460065461162290919063ffffffff16565b905090565b60009081526001602052604090206002015490565b6000828152600160205260409020600201546106c9906106c4611717565b610d20565b6107045760405162461bcd60e51b815260040180806020018281038252602f815260200180611e1c602f913960400191505060405180910390fd5b61070e828261171b565b5050565b61071a611717565b6001600160a01b0316816001600160a01b0316146107695760405162461bcd60e51b815260040180806020018281038252602f815260200180611faf602f913960400191505060405180910390fd5b61070e8282611784565b60075481565b610781611717565b6000546001600160a01b039081169116146107d1576040805162461bcd60e51b81526020600482018190526024820152600080516020611f38833981519152604482015290519081900360640190fd5b60006107db6110b3565b6009556107e6610bcb565b6008556001600160a01b0381161561082d57610801816105dc565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b600554421061084c5760075461084490839061167b565b60065561088f565b60055460009061085c90426115e0565b905060006108756006548361162290919063ffffffff16565b6007549091506108899061064886846116bd565b60065550505b600354604080516370a0823160e01b8152306004820152905160009261010090046001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156108df57600080fd5b505afa1580156108f3573d6000803e3d6000fd5b505050506040513d602081101561090957600080fd5b505160075490915061091c90829061167b565b6006541115610972576040805162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f20686967680000000000000000604482015290519081900360640190fd5b42600881905560075461098591906116bd565b6005556040805184815290517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9181900360200190a1505050565b600280541415610a05576040805162461bcd60e51b815260206004820152601f6024820152600080516020611e4b833981519152604482015290519081900360640190fd5b6002805533610a126110b3565b600955610a1d610bcb565b6008556001600160a01b03811615610a6457610a38816105dc565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b336000908152600b60205260409020548015610ade57336000818152600b6020526040812055600354610aa7916101009091046001600160a01b031690836117ed565b60408051828152905133917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b50506001600255565b60035460ff1690565b6001600160a01b03166000908152600d602052604090205490565b610b13611717565b6000546001600160a01b03908116911614610b63576040805162461bcd60e51b81526020600482018190526024820152600080516020611f38833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000818310610bbc5781610bbe565b825b9392505050565b60065481565b600061068c42600554610bad565b610be1611717565b6000546001600160a01b03908116911614610c31576040805162461bcd60e51b81526020600482018190526024820152600080516020611f38833981519152604482015290519081900360640190fd5b6003546001600160a01b03838116610100909204161415610c835760405162461bcd60e51b815260040180806020018281038252602d815260200180611f58602d913960400191505060405180910390fd5b610c9f610c8e610cf9565b6001600160a01b03841690836117ed565b604080516001600160a01b03841681526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a15050565b600a6020526000908152604090205481565b6000546001600160a01b031690565b6000828152600160205260408120610bbe9083611844565b6000828152600160205260408120610bbe9083611850565b600081565b6004546001600160a01b03163314610d865760405162461bcd60e51b8152600401808060200182810382526030815260200180611e916030913960400191505060405180910390fd5b600280541415610dcb576040805162461bcd60e51b815260206004820152601f6024820152600080516020611e4b833981519152604482015290519081900360640190fd5b6002805560035460ff1615610e1a576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b81610e236110b3565b600955610e2e610bcb565b6008556001600160a01b03811615610e7557610e49816105dc565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b60008211610ebb576040805162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b604482015290519081900360640190fd5b600c54610ec890836116bd565b600c556001600160a01b0383166000908152600d6020526040902054610eee90836116bd565b6001600160a01b0384166000818152600d6020908152604091829020939093558051858152905191927f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d92918290030190a25050600160025550565b6004546001600160a01b03163314610f935760405162461bcd60e51b8152600401808060200182810382526030815260200180611e916030913960400191505060405180910390fd5b6001600160a01b0381166000908152600d6020526040902054610fb79082906113f7565b610fc081611174565b50565b60085481565b600081815260016020526040812061065490611865565b610fe8611717565b6000546001600160a01b03908116911614611038576040805162461bcd60e51b81526020600482018190526024820152600080516020611f38833981519152604482015290519081900360640190fd5b60055442116110785760405162461bcd60e51b8152600401808060200182810382526058815260200180611dc46058913960600191505060405180910390fd5b60078190556040805182815290517ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39181900360200190a150565b6000600c54600014156110c95750600954610670565b61068c6110f8600c54610648670de0b6b3a76400006110f26006546110f2600854610623610bcb565b90611622565b600954906116bd565b60035461010090046001600160a01b031681565b600082815260016020526040902060020154611133906106c4611717565b6107695760405162461bcd60e51b8152600401808060200182810382526030815260200180611ee76030913960400191505060405180910390fd5b60095481565b6004546001600160a01b031633146111bd5760405162461bcd60e51b8152600401808060200182810382526030815260200180611e916030913960400191505060405180910390fd5b600280541415611202576040805162461bcd60e51b815260206004820152601f6024820152600080516020611e4b833981519152604482015290519081900360640190fd5b600280558061120f6110b3565b60095561121a610bcb565b6008556001600160a01b0381161561126157611235816105dc565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b6001600160a01b0382166000908152600b602052604090205480156112ef576001600160a01b038084166000908152600b60205260408120556003546112af916101009091041684836117ed565b6040805182815290516001600160a01b038516917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b5050600160025550565b60055481565b611307611717565b6000546001600160a01b03908116911614611357576040805162461bcd60e51b81526020600482018190526024820152600080516020611f38833981519152604482015290519081900360640190fd5b6001600160a01b03811661139c5760405162461bcd60e51b8152600401808060200182810382526026815260200180611e6b6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031633146114405760405162461bcd60e51b8152600401808060200182810382526030815260200180611e916030913960400191505060405180910390fd5b600280541415611485576040805162461bcd60e51b815260206004820152601f6024820152600080516020611e4b833981519152604482015290519081900360640190fd5b60028055816114926110b3565b60095561149d610bcb565b6008556001600160a01b038116156114e4576114b8816105dc565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b6000821161152d576040805162461bcd60e51b8152602060048201526011602482015270043616e6e6f74207769746864726177203607c1b604482015290519081900360640190fd5b600c5461153a90836115e0565b600c556001600160a01b0383166000908152600d602052604090205461156090836115e0565b6001600160a01b0384166000818152600d6020908152604091829020939093558051858152905191927f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d592918290030190a25050600160025550565b6004546001600160a01b031681565b6000610bbe836001600160a01b038416611870565b6000610bbe83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506118ba565b60008261163157506000610654565b8282028284828161163e57fe5b0414610bbe5760405162461bcd60e51b8152600401808060200182810382526021815260200180611f176021913960400191505060405180910390fd5b6000610bbe83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611951565b600082820183811015610bbe576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b600082815260016020526040902061173390826115cb565b1561070e57611740611717565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260016020526040902061179c90826119b6565b1561070e576117a9611717565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261183f9084906119cb565b505050565b6000610bbe8383611a7c565b6000610bbe836001600160a01b038416611ae0565b600061065482611af8565b600061187c8383611ae0565b6118b257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610654565b506000610654565b600081848411156119495760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561190e5781810151838201526020016118f6565b50505050905090810190601f16801561193b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836119a05760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561190e5781810151838201526020016118f6565b5060008385816119ac57fe5b0495945050505050565b6000610bbe836001600160a01b038416611afc565b6060611a20826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bc29092919063ffffffff16565b80519091501561183f57808060200190516020811015611a3f57600080fd5b505161183f5760405162461bcd60e51b815260040180806020018281038252602a815260200180611f85602a913960400191505060405180910390fd5b81546000908210611abe5760405162461bcd60e51b8152600401808060200182810382526022815260200180611da26022913960400191505060405180910390fd5b826000018281548110611acd57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60008181526001830160205260408120548015611bb85783546000198083019190810190600090879083908110611b2f57fe5b9060005260206000200154905080876000018481548110611b4c57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611b7c57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610654565b6000915050610654565b6060611bd18484600085611bd9565b949350505050565b606082471015611c1a5760405162461bcd60e51b8152600401808060200182810382526026815260200180611ec16026913960400191505060405180910390fd5b611c2385611d35565b611c74576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611cb35780518252601f199092019160209182019101611c94565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611d15576040519150601f19603f3d011682016040523d82523d6000602084013e611d1a565b606091505b5091509150611d2a828286611d3b565b979650505050505050565b3b151590565b60608315611d4a575081610bbe565b825115611d5a5782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561190e5781810151838201526020016118f656fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e647350726576696f7573207265776172647320706572696f64206d75737420626520636f6d706c657465206265666f7265206368616e67696e6720746865206475726174696f6e20666f7220746865206e657720706572696f64416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e745265656e7472616e637947756172643a207265656e7472616e742063616c6c004f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737352657761726448616e646c65723a3a4f6e6c795661756c743a206e6f742063616c6c696e672066726f6d207661756c74416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657243616e6e6f7420776974686472617720746865207374616b696e67206f72207265776172647320746f6b656e735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220cd6e4f8f28a29c4404114c9a3dd83d2fce7ea7d99d9afe696fd4f93b117b45c664736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "_account": "address"
        }
      },
      "constructor": {
        "params": {
          "_owner": "address",
          "_rewardsToken": "address",
          "_vault": "uint256"
        }
      },
      "earned(address)": {
        "params": {
          "_account": "address"
        }
      },
      "exit(address)": {
        "details": "Only vault can call it",
        "params": {
          "_staker": "address"
        }
      },
      "getReward()": {
        "details": "updates rewards on call"
      },
      "getRewardFromVault(address)": {
        "details": "Only vault can call itupdates rewards on call",
        "params": {
          "_staker": "address"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "min(uint256,uint256)": {
        "params": {
          "_a": "uint",
          "_b": "uint"
        }
      },
      "notifyRewardAmount(uint256)": {
        "details": "Only owner  can call itIncreases duration of rewards",
        "params": {
          "_reward": "uint"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recoverERC20(address,uint256)": {
        "details": "Only owner  can call it",
        "params": {
          "_tokenAddress": "address",
          "_tokenAmount": "uint"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setRewardsDuration(uint256)": {
        "details": "Only owner  can call itPrevious rewards must be complete",
        "params": {
          "_rewardsDuration": "uint"
        }
      },
      "stake(address,uint256)": {
        "details": "Only vault can call itupdates rewards on call",
        "params": {
          "_amount": "uint",
          "_staker": "address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,uint256)": {
        "details": "Only vault can call itupdates rewards on call",
        "params": {
          "_amount": "uint",
          "_staker": "address"
        }
      }
    },
    "stateVariables": {
      "_balances": {
        "details": "Tracks the amount of TCAP minted per user"
      },
      "_totalSupply": {
        "details": "Tracks the total supply of the minted TCAPs"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Recovered(address,uint256)": {
        "notice": "An event emitted when a erc20 token is recovered"
      },
      "RewardAdded(uint256)": {
        "notice": "An event emitted when a reward is added"
      },
      "RewardPaid(address,uint256)": {
        "notice": "An event emitted when reward is paid to a user"
      },
      "RewardsDurationUpdated(uint256)": {
        "notice": "An event emitted when the rewards duration is updated"
      },
      "Staked(address,uint256)": {
        "notice": "An event emitted when TCAP is minted and staked to earn rewards"
      },
      "Withdrawn(address,uint256)": {
        "notice": "An event emitted when TCAP is burned and removed of stake"
      }
    },
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Returns the amount of TCAP tokens minted and getting reward from specific user."
      },
      "constructor": {
        "notice": "Constructor"
      },
      "earned(address)": {
        "notice": "Returns the amount of reward tokens a user has earned."
      },
      "exit(address)": {
        "notice": "Removes all stake and transfers all rewards to the staker."
      },
      "getReward()": {
        "notice": "Transfers to the caller the current amount of rewards tokens earned."
      },
      "getRewardFromVault(address)": {
        "notice": "Called when TCAP is burned or liquidated, transfers to the staker the current amount of rewards tokens earned."
      },
      "lastTimeRewardApplicable()": {
        "notice": "Returns the minimun between current block timestamp or the finish period of rewards."
      },
      "lastUpdateTime()": {
        "notice": "Last time rewards were updated"
      },
      "min(uint256,uint256)": {
        "notice": "Returns the minimun between two variables"
      },
      "notifyRewardAmount(uint256)": {
        "notice": "Notifies the contract that reward has been added to be given."
      },
      "periodFinish()": {
        "notice": "Tracks the period where users stop earning rewards"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders"
      },
      "rewardPerToken()": {
        "notice": "Returns the calculated reward per token deposited."
      },
      "rewards(address)": {
        "notice": "Tracks the user rewards"
      },
      "rewardsDuration()": {
        "notice": "How long the rewards lasts, it updates when more rewards are added"
      },
      "rewardsToken()": {
        "notice": "Address of the reward"
      },
      "setRewardsDuration(uint256)": {
        "notice": "Updates the reward duration"
      },
      "stake(address,uint256)": {
        "notice": "Called when TCAP is minted, adds the minted value as stake"
      },
      "totalSupply()": {
        "notice": "Returns the total amount of TCAP tokens minted and getting reward on this vault."
      },
      "userRewardPerTokenPaid(address)": {
        "notice": "Track the rewards paid to users"
      },
      "vault()": {
        "notice": "Address of the vault"
      },
      "withdraw(address,uint256)": {
        "notice": "Called when TCAP is burned or liquidated, removes the burned value as stake"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 359,
        "contract": "contracts/RewardHandler.sol:RewardHandler",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 91,
        "contract": "contracts/RewardHandler.sol:RewardHandler",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)87_storage)"
      },
      {
        "astId": 2509,
        "contract": "contracts/RewardHandler.sol:RewardHandler",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2426,
        "contract": "contracts/RewardHandler.sol:RewardHandler",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 5254,
        "contract": "contracts/RewardHandler.sol:RewardHandler",
        "label": "rewardsToken",
        "offset": 1,
        "slot": "3",
        "type": "t_contract(IERC20)1421"
      },
      {
        "astId": 5257,
        "contract": "contracts/RewardHandler.sol:RewardHandler",
        "label": "vault",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5261,
        "contract": "contracts/RewardHandler.sol:RewardHandler",
        "label": "periodFinish",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5264,
        "contract": "contracts/RewardHandler.sol:RewardHandler",
        "label": "rewardRate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5268,
        "contract": "contracts/RewardHandler.sol:RewardHandler",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5271,
        "contract": "contracts/RewardHandler.sol:RewardHandler",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5273,
        "contract": "contracts/RewardHandler.sol:RewardHandler",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5278,
        "contract": "contracts/RewardHandler.sol:RewardHandler",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5283,
        "contract": "contracts/RewardHandler.sol:RewardHandler",
        "label": "rewards",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5286,
        "contract": "contracts/RewardHandler.sol:RewardHandler",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5291,
        "contract": "contracts/RewardHandler.sol:RewardHandler",
        "label": "_balances",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1421": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)87_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)87_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2204_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2203,
            "contract": "contracts/RewardHandler.sol:RewardHandler",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1939_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)87_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 84,
            "contract": "contracts/RewardHandler.sol:RewardHandler",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2204_storage"
          },
          {
            "astId": 86,
            "contract": "contracts/RewardHandler.sol:RewardHandler",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1939_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1934,
            "contract": "contracts/RewardHandler.sol:RewardHandler",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1938,
            "contract": "contracts/RewardHandler.sol:RewardHandler",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}