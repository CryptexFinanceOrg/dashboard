{
  "address": "0x35Be1612884616b5b4dcFE78A1927a3c3D5eA3C0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getLatestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestRound",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_id",
          "type": "uint80"
        }
      ],
      "name": "getPreviousAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_id",
          "type": "uint80"
        }
      ],
      "name": "getPreviousTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_id",
          "type": "uint80"
        }
      ],
      "name": "getRound",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "name": "setReferenceContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf59bbb9dae3fbf87cb07efe1b6d1f884983bac296bec781e49a733a46f49752d",
  "receipt": {
    "to": null,
    "from": "0xFB77c9BBd9Fd884A5078Ef0e97ec089C9B811243",
    "contractAddress": "0x35Be1612884616b5b4dcFE78A1927a3c3D5eA3C0",
    "transactionIndex": 5,
    "gasUsed": "626355",
    "logsBloom": "0x
    "blockHash": "0x5ed4d8a27903a3d298e57152fc2892bbeedb7a1bbf8a4cf0b13b655bfd8597ae",
    "transactionHash": "0xf59bbb9dae3fbf87cb07efe1b6d1f884983bac296bec781e49a733a46f49752d",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 8016775,
        "transactionHash": "0xf59bbb9dae3fbf87cb07efe1b6d1f884983bac296bec781e49a733a46f49752d",
        "address": "0x35Be1612884616b5b4dcFE78A1927a3c3D5eA3C0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fb77c9bbd9fd884a5078ef0e97ec089c9b811243"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x5ed4d8a27903a3d298e57152fc2892bbeedb7a1bbf8a4cf0b13b655bfd8597ae"
      }
    ],
    "blockNumber": 8016775,
    "cumulativeGasUsed": "1199888",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9Dcf949BCA2F4A8a62350E0065d18902eE87Dca3"
  ],
  "solcInputHash": "01a0b70a059871db4215d262a86724ef",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getLatestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestRound\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_id\",\"type\":\"uint80\"}],\"name\":\"getPreviousAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_id\",\"type\":\"uint80\"}],\"name\":\"getPreviousTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_id\",\"type\":\"uint80\"}],\"name\":\"getRound\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"setReferenceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Cristian Espinoza\",\"kind\":\"dev\",\"methods\":{\"getLatestAnswer()\":{\"returns\":{\"price\":\"price\"}},\"getPreviousAnswer(uint80)\":{\"params\":{\"_id\":\"of round\"},\"returns\":{\"_0\":\"price\"}},\"getPreviousTimestamp(uint80)\":{\"params\":{\"_id\":\"of round\"},\"returns\":{\"_0\":\"timeStamp\"}},\"getRound(uint80)\":{\"params\":{\"_id\":\"of round\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setReferenceContract(address)\":{\"details\":\"Only owner can call it.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Chainlink Oracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Called once the contract is deployed. Set the Chainlink Oracle as an aggregator.\"},\"getLatestAnswer()\":{\"notice\":\"Returns the latest answer from the reference contract.\"},\"getLatestRound()\":{\"notice\":\"Returns the latest round from the reference contract.\"},\"getLatestTimestamp()\":{\"notice\":\"Returns the last time the Oracle was updated.\"},\"getPreviousAnswer(uint80)\":{\"notice\":\"Returns a previous answer updated on the Oracle.\"},\"getPreviousTimestamp(uint80)\":{\"notice\":\"Returns a previous time the Oracle was updated.\"},\"getRound(uint80)\":{\"notice\":\"Returns a given round from the reference contract.\"},\"setReferenceContract(address)\":{\"notice\":\"Changes the reference contract.\"},\"supportsInterface(bytes4)\":{\"notice\":\"ERC165 Standard for support of interfaces.\"}},\"notice\":\"Contract in charge or reading the information from a Chainlink Oracle. TCAP contracts read the price directly from this contract. More information can be found on Chainlink Documentation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/ChainlinkOracle.sol\":\"ChainlinkOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"license\":\"MIT\"},\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xf7c39c7e6d06ed3bda90cfefbcbf2ddc32c599c3d6721746546ad64946efccaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"contracts/oracles/ChainlinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title Chainlink Oracle\\n * @author Cristian Espinoza\\n * @notice Contract in charge or reading the information from a Chainlink Oracle. TCAP contracts read the price directly from this contract. More information can be found on Chainlink Documentation\\n */\\ncontract ChainlinkOracle is Ownable, IERC165 {\\n  AggregatorV3Interface internal aggregatorContract;\\n\\n  /*\\n   * setReferenceContract.selector ^\\n   * getLatestAnswer.selector ^\\n   * getLatestTimestamp.selector ^\\n   * getPreviousAnswer.selector ^\\n   * getPreviousTimestamp.selector =>  0x85be402b\\n   */\\n  bytes4 private constant _INTERFACE_ID_CHAINLINK_ORACLE = 0x85be402b;\\n\\n  /*\\n   * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n   */\\n  bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n  /**\\n   * @notice Called once the contract is deployed.\\n   * Set the Chainlink Oracle as an aggregator.\\n   */\\n  constructor(address _aggregator)  {\\n    aggregatorContract = AggregatorV3Interface(_aggregator);\\n  }\\n\\n  /**\\n   * @notice Changes the reference contract.\\n   * @dev Only owner can call it.\\n   */\\n  function setReferenceContract(address _aggregator) public onlyOwner() {\\n    aggregatorContract = AggregatorV3Interface(_aggregator);\\n  }\\n\\n  /**\\n   * @notice Returns the latest answer from the reference contract.\\n   * @return price\\n   */\\n  function getLatestAnswer() public view returns (int256 price) {\\n    (, price, , , ) = aggregatorContract.latestRoundData();\\n  }\\n\\n  /**\\n   * @notice Returns the latest round from the reference contract.\\n   */\\n  function getLatestRound()\\n    public\\n    view\\n    returns (\\n      uint80,\\n      int256,\\n      uint256,\\n      uint256,\\n      uint80\\n    )\\n  {\\n    (\\n      uint80 roundID,\\n      int256 price,\\n      uint256 startedAt,\\n      uint256 timeStamp,\\n      uint80 answeredInRound\\n    ) = aggregatorContract.latestRoundData();\\n\\n    return (roundID, price, startedAt, timeStamp, answeredInRound);\\n  }\\n\\n  /**\\n   * @notice Returns a given round from the reference contract.\\n   * @param _id of round\\n   */\\n  function getRound(uint80 _id)\\n    public\\n    view\\n    returns (\\n      uint80,\\n      int256,\\n      uint256,\\n      uint256,\\n      uint80\\n    )\\n  {\\n    (\\n      uint80 roundID,\\n      int256 price,\\n      uint256 startedAt,\\n      uint256 timeStamp,\\n      uint80 answeredInRound\\n    ) = aggregatorContract.getRoundData(_id);\\n\\n    return (roundID, price, startedAt, timeStamp, answeredInRound);\\n  }\\n\\n  /**\\n   * @notice Returns the last time the Oracle was updated.\\n   */\\n  function getLatestTimestamp() public view returns (uint256) {\\n    (, , , uint256 timeStamp, ) = aggregatorContract.latestRoundData();\\n    return timeStamp;\\n  }\\n\\n  /**\\n   * @notice Returns a previous answer updated on the Oracle.\\n   * @param _id of round\\n   * @return price\\n   */\\n  function getPreviousAnswer(uint80 _id) public view returns (int256) {\\n    (uint80 roundID, int256 price, , , ) = aggregatorContract.getRoundData(_id);\\n    require(_id <= roundID, \\\"Not enough history\\\");\\n    return price;\\n  }\\n\\n  /**\\n   * @notice Returns a previous time the Oracle was updated.\\n   * @param _id of round\\n   * @return timeStamp\\n   */\\n  function getPreviousTimestamp(uint80 _id) public view returns (uint256) {\\n    (uint80 roundID, , , uint256 timeStamp, ) = aggregatorContract.getRoundData(\\n      _id\\n    );\\n    require(_id <= roundID, \\\"Not enough history\\\");\\n    return timeStamp;\\n  }\\n\\n  /**\\n   * @notice ERC165 Standard for support of interfaces.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    external\\n    override\\n    pure\\n    returns (bool)\\n  {\\n    return (interfaceId == _INTERFACE_ID_CHAINLINK_ORACLE ||\\n      interfaceId == _INTERFACE_ID_ERC165);\\n  }\\n}\\n\",\"keccak256\":\"0x733660f59a1f2edd276b2a77bf4161b45850db59a779e8a7e7a3893eb860126a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a49380380610a498339818101604052602081101561003357600080fd5b5051600061003f6100ae565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b0319166001600160a01b03929092169190911790556100b2565b3390565b610988806100c16000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a6146101bb5780637498e6c2146101c35780638da5cb5b146101e957806396237c021461020d578063f2fde38b14610215578063f43b52cb1461023b576100a9565b806301ffc9a7146100ae57806324a343fa146100e95780633cf8a69714610153578063608bf1c31461017b578063708fe4df146101b3575b600080fd5b6100d5600480360360208110156100c457600080fd5b50356001600160e01b031916610243565b604080519115158252519081900360200190f35b61010f600480360360208110156100ff57600080fd5b50356001600160501b031661027a565b60405180866001600160501b03168152602001858152602001848152602001838152602001826001600160501b031681526020019550505050505060405180910390f35b6101796004803603602081101561016957600080fd5b50356001600160a01b0316610343565b005b6101a16004803603602081101561019157600080fd5b50356001600160501b03166103cf565b60408051918252519081900360200190f35b61010f6104bf565b610179610573565b6101a1600480360360208110156101d957600080fd5b50356001600160501b0316610627565b6101f1610710565b604080516001600160a01b039092168252519081900360200190f35b6101a161071f565b6101796004803603602081101561022b57600080fd5b50356001600160a01b0316610798565b6101a16108a2565b60006001600160e01b031982166385be402b60e01b148061027457506001600160e01b031982166301ffc9a760e01b145b92915050565b600080600080600080600080600080600160009054906101000a90046001600160a01b03166001600160a01b0316639a6fc8f58c6040518263ffffffff1660e01b815260040180826001600160501b0316815260200191505060a06040518083038186803b1580156102eb57600080fd5b505afa1580156102ff573d6000803e3d6000fd5b505050506040513d60a081101561031557600080fd5b508051602082015160408301516060840151608090940151929f919e509c50919a5098509650505050505050565b61034b610928565b6000546001600160a01b039081169116146103ad576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60015460408051639a6fc8f560e01b81526001600160501b03841660048201529051600092839283926001600160a01b0390921691639a6fc8f59160248082019260a092909190829003018186803b15801561042a57600080fd5b505afa15801561043e573d6000803e3d6000fd5b505050506040513d60a081101561045457600080fd5b50805160609091015190925090506001600160501b0380831690851611156104b8576040805162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820686973746f727960701b604482015290519081900360640190fd5b9392505050565b600080600080600080600080600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561051c57600080fd5b505afa158015610530573d6000803e3d6000fd5b505050506040513d60a081101561054657600080fd5b508051602082015160408301516060840151608090940151929e919d509b50919950975095505050505050565b61057b610928565b6000546001600160a01b039081169116146105dd576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60015460408051639a6fc8f560e01b81526001600160501b03841660048201529051600092839283926001600160a01b0390921691639a6fc8f59160248082019260a092909190829003018186803b15801561068257600080fd5b505afa158015610696573d6000803e3d6000fd5b505050506040513d60a08110156106ac57600080fd5b50805160209091015190925090506001600160501b0380831690851611156104b8576040805162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820686973746f727960701b604482015290519081900360640190fd5b6000546001600160a01b031690565b60015460408051633fabe5a360e21b815290516000926001600160a01b03169163feaf968c9160048083019260a0929190829003018186803b15801561076457600080fd5b505afa158015610778573d6000803e3d6000fd5b505050506040513d60a081101561078e57600080fd5b5060200151919050565b6107a0610928565b6000546001600160a01b03908116911614610802576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166108475760405162461bcd60e51b815260040180806020018281038252602681526020018061092d6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108f357600080fd5b505afa158015610907573d6000803e3d6000fd5b505050506040513d60a081101561091d57600080fd5b506060015191505090565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220a85ec8d2ecc6b0389a2ce27c38b99f685aea8489323a354665b96adf63c8aaa264736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a6146101bb5780637498e6c2146101c35780638da5cb5b146101e957806396237c021461020d578063f2fde38b14610215578063f43b52cb1461023b576100a9565b806301ffc9a7146100ae57806324a343fa146100e95780633cf8a69714610153578063608bf1c31461017b578063708fe4df146101b3575b600080fd5b6100d5600480360360208110156100c457600080fd5b50356001600160e01b031916610243565b604080519115158252519081900360200190f35b61010f600480360360208110156100ff57600080fd5b50356001600160501b031661027a565b60405180866001600160501b03168152602001858152602001848152602001838152602001826001600160501b031681526020019550505050505060405180910390f35b6101796004803603602081101561016957600080fd5b50356001600160a01b0316610343565b005b6101a16004803603602081101561019157600080fd5b50356001600160501b03166103cf565b60408051918252519081900360200190f35b61010f6104bf565b610179610573565b6101a1600480360360208110156101d957600080fd5b50356001600160501b0316610627565b6101f1610710565b604080516001600160a01b039092168252519081900360200190f35b6101a161071f565b6101796004803603602081101561022b57600080fd5b50356001600160a01b0316610798565b6101a16108a2565b60006001600160e01b031982166385be402b60e01b148061027457506001600160e01b031982166301ffc9a760e01b145b92915050565b600080600080600080600080600080600160009054906101000a90046001600160a01b03166001600160a01b0316639a6fc8f58c6040518263ffffffff1660e01b815260040180826001600160501b0316815260200191505060a06040518083038186803b1580156102eb57600080fd5b505afa1580156102ff573d6000803e3d6000fd5b505050506040513d60a081101561031557600080fd5b508051602082015160408301516060840151608090940151929f919e509c50919a5098509650505050505050565b61034b610928565b6000546001600160a01b039081169116146103ad576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60015460408051639a6fc8f560e01b81526001600160501b03841660048201529051600092839283926001600160a01b0390921691639a6fc8f59160248082019260a092909190829003018186803b15801561042a57600080fd5b505afa15801561043e573d6000803e3d6000fd5b505050506040513d60a081101561045457600080fd5b50805160609091015190925090506001600160501b0380831690851611156104b8576040805162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820686973746f727960701b604482015290519081900360640190fd5b9392505050565b600080600080600080600080600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561051c57600080fd5b505afa158015610530573d6000803e3d6000fd5b505050506040513d60a081101561054657600080fd5b508051602082015160408301516060840151608090940151929e919d509b50919950975095505050505050565b61057b610928565b6000546001600160a01b039081169116146105dd576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60015460408051639a6fc8f560e01b81526001600160501b03841660048201529051600092839283926001600160a01b0390921691639a6fc8f59160248082019260a092909190829003018186803b15801561068257600080fd5b505afa158015610696573d6000803e3d6000fd5b505050506040513d60a08110156106ac57600080fd5b50805160209091015190925090506001600160501b0380831690851611156104b8576040805162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820686973746f727960701b604482015290519081900360640190fd5b6000546001600160a01b031690565b60015460408051633fabe5a360e21b815290516000926001600160a01b03169163feaf968c9160048083019260a0929190829003018186803b15801561076457600080fd5b505afa158015610778573d6000803e3d6000fd5b505050506040513d60a081101561078e57600080fd5b5060200151919050565b6107a0610928565b6000546001600160a01b03908116911614610802576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166108475760405162461bcd60e51b815260040180806020018281038252602681526020018061092d6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108f357600080fd5b505afa158015610907573d6000803e3d6000fd5b505050506040513d60a081101561091d57600080fd5b506060015191505090565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220a85ec8d2ecc6b0389a2ce27c38b99f685aea8489323a354665b96adf63c8aaa264736f6c63430007050033",
  "devdoc": {
    "author": "Cristian Espinoza",
    "kind": "dev",
    "methods": {
      "getLatestAnswer()": {
        "returns": {
          "price": "price"
        }
      },
      "getPreviousAnswer(uint80)": {
        "params": {
          "_id": "of round"
        },
        "returns": {
          "_0": "price"
        }
      },
      "getPreviousTimestamp(uint80)": {
        "params": {
          "_id": "of round"
        },
        "returns": {
          "_0": "timeStamp"
        }
      },
      "getRound(uint80)": {
        "params": {
          "_id": "of round"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setReferenceContract(address)": {
        "details": "Only owner can call it."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Chainlink Oracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Called once the contract is deployed. Set the Chainlink Oracle as an aggregator."
      },
      "getLatestAnswer()": {
        "notice": "Returns the latest answer from the reference contract."
      },
      "getLatestRound()": {
        "notice": "Returns the latest round from the reference contract."
      },
      "getLatestTimestamp()": {
        "notice": "Returns the last time the Oracle was updated."
      },
      "getPreviousAnswer(uint80)": {
        "notice": "Returns a previous answer updated on the Oracle."
      },
      "getPreviousTimestamp(uint80)": {
        "notice": "Returns a previous time the Oracle was updated."
      },
      "getRound(uint80)": {
        "notice": "Returns a given round from the reference contract."
      },
      "setReferenceContract(address)": {
        "notice": "Changes the reference contract."
      },
      "supportsInterface(bytes4)": {
        "notice": "ERC165 Standard for support of interfaces."
      }
    },
    "notice": "Contract in charge or reading the information from a Chainlink Oracle. TCAP contracts read the price directly from this contract. More information can be found on Chainlink Documentation",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 359,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6272,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "aggregatorContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      }
    }
  }
}